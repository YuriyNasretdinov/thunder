// Code generated by protoc-gen-gpbrpc-go.
// source: phproxyd.proto
// DO NOT EDIT!

package badoo_phproxyd

import "github.com/gogo/protobuf/proto"
import "badoo/_packages/gpbrpc"
import "fmt"

type GpbrpcType struct {
}

var Gpbrpc GpbrpcType

var RequestMsgid_gpbrpc_name = map[uint32]string{
	1: "request_rrd",
	2: "request_ping",
	3: "request_stat",
	4: "request_run",
	5: "request_check",
	6: "request_free",
	7: "request_terminate",
}

var RequestMsgid_gpbrpc_value = map[string]uint32{
	"request_rrd":       1,
	"request_ping":      2,
	"request_stat":      3,
	"request_run":       4,
	"request_check":     5,
	"request_free":      6,
	"request_terminate": 7,
}

var ResponseMsgid_gpbrpc_name = map[uint32]string{
	1: "response_generic",
	2: "response_ping",
	3: "response_rrd",
	4: "response_stat",
	5: "response_check",
}

var ResponseMsgid_gpbrpc_value = map[string]uint32{
	"response_generic": 1,
	"response_ping":    2,
	"response_rrd":     3,
	"response_stat":    4,
	"response_check":   5,
}

func (GpbrpcType) GetRequestMsgid(msg proto.Message) uint32 {
	switch msg.(type) {
	case *RequestRrd:
		return uint32(RequestMsgid_REQUEST_RRD)
	case *RequestPing:
		return uint32(RequestMsgid_REQUEST_PING)
	case *RequestStat:
		return uint32(RequestMsgid_REQUEST_STAT)
	case *RequestRun:
		return uint32(RequestMsgid_REQUEST_RUN)
	case *RequestCheck:
		return uint32(RequestMsgid_REQUEST_CHECK)
	case *RequestFree:
		return uint32(RequestMsgid_REQUEST_FREE)
	case *RequestTerminate:
		return uint32(RequestMsgid_REQUEST_TERMINATE)
	default:
		panic("you gave me the wrong message")
	}
}

func (GpbrpcType) GetRequestNameToIdMap() map[string]uint32 {
	return RequestMsgid_gpbrpc_value
}

func (GpbrpcType) GetRequestIdToNameMap() map[uint32]string {
	return RequestMsgid_gpbrpc_name
}

func (GpbrpcType) GetResponseNameToIdMap() map[string]uint32 {
	return ResponseMsgid_gpbrpc_value
}

func (GpbrpcType) GetResponseIdToNameMap() map[uint32]string {
	return ResponseMsgid_gpbrpc_name
}

func (GpbrpcType) GetResponseMsgid(msg proto.Message) uint32 {
	switch msg.(type) {
	case *ResponseGeneric:
		return uint32(ResponseMsgid_RESPONSE_GENERIC)
	case *ResponsePing:
		return uint32(ResponseMsgid_RESPONSE_PING)
	case *ResponseRrd:
		return uint32(ResponseMsgid_RESPONSE_RRD)
	case *ResponseStat:
		return uint32(ResponseMsgid_RESPONSE_STAT)
	case *ResponseCheck:
		return uint32(ResponseMsgid_RESPONSE_CHECK)
	default:
		panic("you gave me the wrong message")
	}
}

func (GpbrpcType) GetPackageName() string {
	return "badoo.phproxyd"
}

func (GpbrpcType) GetRequestMsg(request_msgid uint32) proto.Message {
	switch RequestMsgid(request_msgid) {
	case RequestMsgid_REQUEST_RRD:
		return &RequestRrd{}
	case RequestMsgid_REQUEST_PING:
		return &RequestPing{}
	case RequestMsgid_REQUEST_STAT:
		return &RequestStat{}
	case RequestMsgid_REQUEST_RUN:
		return &RequestRun{}
	case RequestMsgid_REQUEST_CHECK:
		return &RequestCheck{}
	case RequestMsgid_REQUEST_FREE:
		return &RequestFree{}
	case RequestMsgid_REQUEST_TERMINATE:
		return &RequestTerminate{}
	default:
		return nil
	}
}

func (GpbrpcType) GetResponseMsg(response_msgid uint32) proto.Message {
	switch ResponseMsgid(response_msgid) {
	case ResponseMsgid_RESPONSE_GENERIC:
		return &ResponseGeneric{}
	case ResponseMsgid_RESPONSE_PING:
		return &ResponsePing{}
	case ResponseMsgid_RESPONSE_RRD:
		return &ResponseRrd{}
	case ResponseMsgid_RESPONSE_STAT:
		return &ResponseStat{}
	case ResponseMsgid_RESPONSE_CHECK:
		return &ResponseCheck{}
	default:
		return nil
	}
}

type GpbrpcInterface interface {
	RequestRrd(rctx gpbrpc.RequestT, request *RequestRrd) gpbrpc.ResultT
	RequestPing(rctx gpbrpc.RequestT, request *RequestPing) gpbrpc.ResultT
	RequestStat(rctx gpbrpc.RequestT, request *RequestStat) gpbrpc.ResultT
	RequestRun(rctx gpbrpc.RequestT, request *RequestRun) gpbrpc.ResultT
	RequestCheck(rctx gpbrpc.RequestT, request *RequestCheck) gpbrpc.ResultT
	RequestFree(rctx gpbrpc.RequestT, request *RequestFree) gpbrpc.ResultT
	RequestTerminate(rctx gpbrpc.RequestT, request *RequestTerminate) gpbrpc.ResultT
}

func (GpbrpcType) Dispatch(rctx gpbrpc.RequestT, abstract_service interface{}) gpbrpc.ResultT {

	service := abstract_service.(GpbrpcInterface)

	switch RequestMsgid(rctx.MessageId) {
	case RequestMsgid_REQUEST_RRD:
		r := rctx.Message.(*RequestRrd)
		return service.RequestRrd(rctx, r)
	case RequestMsgid_REQUEST_PING:
		r := rctx.Message.(*RequestPing)
		return service.RequestPing(rctx, r)
	case RequestMsgid_REQUEST_STAT:
		r := rctx.Message.(*RequestStat)
		return service.RequestStat(rctx, r)
	case RequestMsgid_REQUEST_RUN:
		r := rctx.Message.(*RequestRun)
		return service.RequestRun(rctx, r)
	case RequestMsgid_REQUEST_CHECK:
		r := rctx.Message.(*RequestCheck)
		return service.RequestCheck(rctx, r)
	case RequestMsgid_REQUEST_FREE:
		r := rctx.Message.(*RequestFree)
		return service.RequestFree(rctx, r)
	case RequestMsgid_REQUEST_TERMINATE:
		r := rctx.Message.(*RequestTerminate)
		return service.RequestTerminate(rctx, r)
	default:
		panic("screw you")
	}
}

var okResult = gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(0)})

func (GpbrpcType) OK(args ...interface{}) gpbrpc.ResultT {
	if len(args) == 0 {
		return okResult
	}
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(0),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorGeneric(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_GENERIC)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorRunFailed(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_RUN_FAILED)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorAlreadyRunning(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_ALREADY_RUNNING)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorNotFound(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_NOT_FOUND)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorWorking(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_WORKING)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorNoMemory(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_NO_MEMORY)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorSuccessFinished(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_SUCCESS_FINISHED)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorFailedFinished(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_FAILED_FINISHED)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorWaitForFree(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_WAIT_FOR_FREE)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorStartChildFailed(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_START_CHILD_FAILED)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorTooBusy(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_TOO_BUSY)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

/*
	func ($receiver$) RequestRrd(rctx gpbrpc.RequestT, request *$proto$.RequestRrd) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

	func ($receiver$) RequestPing(rctx gpbrpc.RequestT, request *$proto$.RequestPing) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

	func ($receiver$) RequestStat(rctx gpbrpc.RequestT, request *$proto$.RequestStat) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

	func ($receiver$) RequestRun(rctx gpbrpc.RequestT, request *$proto$.RequestRun) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

	func ($receiver$) RequestCheck(rctx gpbrpc.RequestT, request *$proto$.RequestCheck) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

	func ($receiver$) RequestFree(rctx gpbrpc.RequestT, request *$proto$.RequestFree) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

	func ($receiver$) RequestTerminate(rctx gpbrpc.RequestT, request *$proto$.RequestTerminate) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

*/
