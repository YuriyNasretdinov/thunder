// Code generated by protoc-gen-gpbrpc-go.
// source: thunder.proto
// DO NOT EDIT!

package thunder

import "github.com/gogo/protobuf/proto"
import "badoo/_packages/gpbrpc"
import "fmt"

type GpbrpcType struct {
}

var Gpbrpc GpbrpcType

var RequestMsgid_gpbrpc_name = map[uint32]string{
	1: "request_add_jobs",
	2: "request_update_status",
	3: "request_log_finish",
}

var RequestMsgid_gpbrpc_value = map[string]uint32{
	"request_add_jobs":      1,
	"request_update_status": 2,
	"request_log_finish":    3,
}

var ResponseMsgid_gpbrpc_name = map[uint32]string{
	1: "response_generic",
	2: "response_job_ids",
	3: "response_run_info",
}

var ResponseMsgid_gpbrpc_value = map[string]uint32{
	"response_generic":  1,
	"response_job_ids":  2,
	"response_run_info": 3,
}

func (GpbrpcType) GetRequestMsgid(msg proto.Message) uint32 {
	switch msg.(type) {
	case *RequestAddJobs:
		return uint32(RequestMsgid_REQUEST_ADD_JOBS)
	case *RequestUpdateStatus:
		return uint32(RequestMsgid_REQUEST_UPDATE_STATUS)
	case *RequestLogFinish:
		return uint32(RequestMsgid_REQUEST_LOG_FINISH)
	default:
		panic("you gave me the wrong message")
	}
}

func (GpbrpcType) GetRequestNameToIdMap() map[string]uint32 {
	return RequestMsgid_gpbrpc_value
}

func (GpbrpcType) GetRequestIdToNameMap() map[uint32]string {
	return RequestMsgid_gpbrpc_name
}

func (GpbrpcType) GetResponseNameToIdMap() map[string]uint32 {
	return ResponseMsgid_gpbrpc_value
}

func (GpbrpcType) GetResponseIdToNameMap() map[uint32]string {
	return ResponseMsgid_gpbrpc_name
}

func (GpbrpcType) GetResponseMsgid(msg proto.Message) uint32 {
	switch msg.(type) {
	case *ResponseGeneric:
		return uint32(ResponseMsgid_RESPONSE_GENERIC)
	case *ResponseJobIds:
		return uint32(ResponseMsgid_RESPONSE_JOB_IDS)
	case *ResponseRunInfo:
		return uint32(ResponseMsgid_RESPONSE_RUN_INFO)
	default:
		panic("you gave me the wrong message")
	}
}

func (GpbrpcType) GetPackageName() string {
	return "thunder"
}

func (GpbrpcType) GetRequestMsg(request_msgid uint32) proto.Message {
	switch RequestMsgid(request_msgid) {
	case RequestMsgid_REQUEST_ADD_JOBS:
		return &RequestAddJobs{}
	case RequestMsgid_REQUEST_UPDATE_STATUS:
		return &RequestUpdateStatus{}
	case RequestMsgid_REQUEST_LOG_FINISH:
		return &RequestLogFinish{}
	default:
		return nil
	}
}

func (GpbrpcType) GetResponseMsg(response_msgid uint32) proto.Message {
	switch ResponseMsgid(response_msgid) {
	case ResponseMsgid_RESPONSE_GENERIC:
		return &ResponseGeneric{}
	case ResponseMsgid_RESPONSE_JOB_IDS:
		return &ResponseJobIds{}
	case ResponseMsgid_RESPONSE_RUN_INFO:
		return &ResponseRunInfo{}
	default:
		return nil
	}
}

type GpbrpcInterface interface {
	RequestAddJobs(rctx gpbrpc.RequestT, request *RequestAddJobs) gpbrpc.ResultT
	RequestUpdateStatus(rctx gpbrpc.RequestT, request *RequestUpdateStatus) gpbrpc.ResultT
	RequestLogFinish(rctx gpbrpc.RequestT, request *RequestLogFinish) gpbrpc.ResultT
}

func (GpbrpcType) Dispatch(rctx gpbrpc.RequestT, abstract_service interface{}) gpbrpc.ResultT {

	service := abstract_service.(GpbrpcInterface)

	switch RequestMsgid(rctx.MessageId) {
	case RequestMsgid_REQUEST_ADD_JOBS:
		r := rctx.Message.(*RequestAddJobs)
		return service.RequestAddJobs(rctx, r)
	case RequestMsgid_REQUEST_UPDATE_STATUS:
		r := rctx.Message.(*RequestUpdateStatus)
		return service.RequestUpdateStatus(rctx, r)
	case RequestMsgid_REQUEST_LOG_FINISH:
		r := rctx.Message.(*RequestLogFinish)
		return service.RequestLogFinish(rctx, r)
	default:
		panic("screw you")
	}
}

var okResult = gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(0)})

func (GpbrpcType) OK(args ...interface{}) gpbrpc.ResultT {
	if len(args) == 0 {
		return okResult
	}
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(0),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

func (GpbrpcType) ErrorGeneric(args ...interface{}) gpbrpc.ResultT {
	return gpbrpc.Result(&ResponseGeneric{ErrorCode: proto.Int32(-int32(Errno_ERRNO_GENERIC)),
		ErrorText: proto.String(fmt.Sprint(args...))})
}

/*
	func ($receiver$) RequestAddJobs(rctx gpbrpc.RequestT, request *$proto$.RequestAddJobs) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

	func ($receiver$) RequestUpdateStatus(rctx gpbrpc.RequestT, request *$proto$.RequestUpdateStatus) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

	func ($receiver$) RequestLogFinish(rctx gpbrpc.RequestT, request *$proto$.RequestLogFinish) gpbrpc.ResultT {
		return $proto$.Gpbrpc.ErrorGeneric("not implemented")
	}

*/
